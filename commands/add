#!/bin/bash

. ns import "sv_*"

if [[ -z "$sv_sep" ]]; then
    sv_sep=,
fi

sep="$sv_sep"
file="$sv_file"

dir="${file%/*}"
mkdir -p "$dir"
touch "$file"
if [[ $? -gt 0 || ! -f "$file" ]]; then
    echo "sv add failed. '${file}' is not a regular file" >&2
    exit 1
fi

# the code assumes that the header line does not have special CSV parsing rules,
# so just assume no quoted commas and it can split on the comma (or $sv_sep)
header=
wcl=$(cat "$file" | wc -l)
hdr_exists=0
if [[ $wcl -gt 0 ]]; then
    header=$(cat "$file" | head -1)
    hdr_exists=1
fi

# set header to sv_{col_names} if it could not find a header line in the file
for name in `set | grep "^sv_" | cut -d '=' -f1`
do
    if [[ $hdr_exists -eq 1 ]]; then
        content=$(cat "$file")
        if [[ -n "$content" ]]; then
            break
        else
            # file just had empty content in it,
            # e.g, created by doing a touch or echo > command
            header=
            hdr_exists=0
        fi
    fi

    if [[ "$name" == "sv_file" || "$name" == "sv_sep" || "$name" == "sv_row" ]]; then
        continue
    fi
    # val="${!name}"
    norm_name="${name:3}"

    if [[ -z "$header" ]]; then
        header="$norm_name"
    else
        header="${header}${sep}${norm_name}"
    fi
done

newcol=

if [[ $hdr_exists -eq 0 ]]; then
    echo "$header" >"$file"
else
    # add guard
    svfn_sep="$sv_sep"
    svfn_minuend=$(set | grep "^sv_" | cut -d "=" -f1 | tr '\n' "$sv_sep")
    svfn_subtrahend="$header"
    . ns run sv-diff-count
    if [[ $svfn_diff_count -gt 1 ]]; then
        echo "Unable to add row with 2+ new columns for existing file" >&2
        exit 1
    elif [[ $svfn_diff_count -eq 1 ]]; then
        newcol="$svfn_diff"
    fi
fi

abort=0
abort_col=
colno=1
row=
saveIFS="$IFS"
IFS="$sep"
for col in $header
do
    name=$(set | grep "^sv_${col}=" | cut -d '=' -f1 | head -1)
    if [[ -z "$name" ]]; then
        abort_col="$col"
        abort=1
        break
    fi
    val="${!name}"
    svns_rc="$val"
    . ns run sv-sep-sub-rc-resolve
    val="$svns_rc_subst"

    # Must account for the empty column boundary scenarios:
    #     ,1
    #     1,
    # Prepending column with separator (and previous sep. cols)
    # for  colno > 1 condition instead of erroneous -z "$row" condition
    # since the start column could be empty:
    #     ,1
    if [[ $colno -eq 1 ]]; then
        row="$val"
    else
        row="${row}${sep}${val}"
    fi
    ((colno++))
done
IFS="$saveIFS"

if [[ $abort -gt 0 ]]; then
    echo "Error: aborting sep. val. add command due to 'sv_${abort_col}' variable not being set" 1>&2
    exit 1
fi

echo "$row" >>"$file"

sv_sep="$sep"
sv_file="$file"

savenewcol=
save_new_col_val=

if [[ -n "$newcol" ]]; then
    nc=$(echo "$newcol" | tr -d '\n')
    savenewcol="sv_${nc}"
    save_new_col_val="${!savenewcol}"
    . ns delete $savenewcol  # load won't get the correct row number if there's an extra column
fi
. ns run load  # load will assign sv_row

varname="$savenewcol"
varval="$save_new_col_val"

if [[ -n "$newcol" ]]; then
    nc=$(echo "$newcol" | tr -d '\n')
    # eval "$savenewcol"="\$$save_new_col_val"
    declare $varname=$varval  # sv_${nc}="$save_new_col_val"
    save_sv_row="$sv_row"
    ((sv_row--))
    svfn_newcol="$newcol"
    svfn_rowno="$sv_row"
    . ns run add-col
    sv_row="$save_sv_row"
fi

. ns export "sv_*"
