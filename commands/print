#!/bin/bash

. ns import "sv_*"

: ${SV_VERBOSE:=1}

if [[ -z "$sv_sep" ]]; then
    sv_sep=,
fi

sep="$sv_sep"

virtual_scheme="virtual://"
if [[ "${virtual_scheme}" != "${sv_file:0:${#virtual_scheme}}" && ! -f "${sv_file}" ]]; then
    echo "sv print failed. '${sv_file}' is not a regular file" >&2
    exit 1
fi

header=
. ns run sv-cat
wcl=$(echo "$sv_cat" | wc -l)

if [[ $wcl -ge 1 ]]; then
    header=$(echo "$sv_cat" | head -1)
fi

sizes_csv=
csv=$(echo "$sv_cat" | tail -n +2) # everything except 1st line
has_rows=1
if [[ -z "$csv" ]]; then
    has_rows=0
fi

. ns delete sv_cat

# ADJUST CSV
# TO OMIT ANY ROWS THAT DON'T MATCH FILTER CRITERIA
adj_csv="$csv"  # csv does not have header line
if [[ ${has_rows} -gt 0 && -n "${sv_filter}" ]]; then
    adj_csv=
    vars=`set | grep "^sv_" | grep -v "^sv_filter=" | grep -v "^sv_file=" | grep -v "^sv_str=" | grep -v "^sv_row=" | grep -v "^sv_sep=" | cut -d '=' -f1`

    # substitute
    svns_sub="$csv"
    . ns run sv-sep-sub  # a,"a,b" -> a,"a{sv_sep}b"
    subst="$svns_sub"

    # loop
    saveIFS="$IFS"
    IFS=$'\n'
    for line in $subst
    do
        match=0
        for varname in $vars
        do
            svfn_match_name="$varname"
            svns_rc="${!svfn_match_name}"
            svns_nl_repl=1
            . ns run sv-sep-sub-rc  # a,b -> "a{sv_sep}b"
            #                       # Hello$'\n'World -> Hello{sv_nl}World
            svfn_match_value="${svns_rc_subst}"

            svfn_match_header="$header"
            svfn_sep="$sv_sep"

            svfn_match_content="$line"
            IFS="$saveIFS"
            . ns run match
            IFS=$'\n'
            matches=$svfn_matches
            . ns delete svfn_matches

            if [[ $matches -eq 0 ]]; then
                # miss!
                if [[ "${sv_filter}" == and ]]; then
                    match=0
                    break
                fi
            else
                # match!
                if [[ "${sv_filter}" == and ]]; then
                    match=1
                elif [[ "${sv_filter}" == xor && $match -gt 0 ]]; then
                    match=0
                    break
                elif [[ "${sv_filter}" == xor && $match -eq 0 ]]; then
                    match=1
                elif [[ "${sv_filter}" == or ]]; then
                    match=1
                    break
                fi
            fi
        done
        if [[ $match -gt 0 ]]; then
            if [[ -n "$adj_csv" ]]; then
                adj_csv="${adj_csv}"$'\n'
            fi

            # resolve
            svns_sub_in="${line}"
            . ns run sv-sep-sub-resolve
            resolved_line="${svns_sub_out}"
            adj_csv="${adj_csv}${resolved_line}"
        fi
    done
    IFS="$saveIFS"
fi
csv="${adj_csv}"

# DETERMINE COLSIZE VALUES LOOP BLOCK
# STORED AS A SINGLE CSV LINE
# example:
#     a,b,c
#     100,10,1
#     10,1,1
#
#     -> 3,2,1
#
# foreach column
#    foreach line in file
#        get column of that line and update the max in the single csv line
svns_sub="$csv"
. ns run sv-sep-sub  # a,b -> a{sv_sep}b
subst="$svns_sub"; . ns delete svns_sub
fieldno=1
saveIFS="$IFS"
IFS="$sep"
for col in $header
do
    max=${#col}
    ((max+=2))
    IFS=$'\n'
    for line in $subst
    do
        symbolic_col=$(echo "$line" | cut -d "$sep" -f "$fieldno")
        svns_rc="$symbolic_col"
        # TODO: check sv_test/data.csv, num==5, does not display with final newline!
        #       use a placeholder symbol to allow it to take up another line
        svns_nl_repl=0
        . ns run sv-sep-sub-rc-resolve  # a{sv_sep}b -> "a,b"
        real_col="$svns_rc_subst"; . ns delete svns_rc svns_nl_repl svns_rc_subst
        for inner_line in $real_col
        do
            test="$inner_line"
            # echo "$inner_line"
            test_len=${#test}
            ((test_len+=2))
            if [[ $test_len -gt $max ]]; then
                max=$test_len
            fi
        done
        . ns delete real_col
    done
    if [[ $fieldno -eq 1 ]]; then
        sizes_csv="$max"
    else
        sizes_csv="${sizes_csv},${max}"
    fi
    IFS="$sep"

    ((fieldno++))
done

sp="                                                                                              "
hp="----------------------------------------------------------------------------------------------"
# echo "$sizes_csv" # 77,25,20
border1=" "
for colsz in $sizes_csv
do
    sz=$((colsz))
    border1="${border1}+${hp:0:$sz}"
done
border1="${border1}+"
echo
echo "$border1"

fieldno=1
h=" |"
for col in $header
do
    sz=$(echo "$sizes_csv" | cut -d "$sep" -f "$fieldno")
    # echo "sizes: ${sizes_csv}"
    colsz=${#col}
    sz=$((sz-colsz))
    ((sz-=2)) # -1 for leading space, -1 for trailing space
    # echo "size: ${sz}"
    h="${h} ${col}${sp:0:$sz} |"
    ((fieldno++))
done
echo "$h"
echo "$border1"
if [[ $has_rows -eq 0 ]]; then
    border1=
fi
echo
echo "$border1"

# PRINT DATA ROW LOOP BLOCK
# foreach line
#    foreach column in line
#        format column as a part of r (row) print
#    print r (row)
kv=
IFS=$'\n'
for symbolic_line in $subst
do
    r=" |"
    fieldno=1
    max_inner_line_count=0
    IFS="$sep"
    for symbolic_col in $symbolic_line
    do
        
        svns_rc="$symbolic_col"
        svns_nl_repl=0
        . ns run sv-sep-sub-rc-resolve  # a{sv_sep}b -> "a,b"
        real_col="$svns_rc_subst"; . ns delete svns_rc svns_nl_repl svns_rc_subst
        # echo "SYM COL TEST: ${symbolic_col}"
        # echo "REAL COL TEST: ${real_col}"
        inner_line_count=0
        IFS=$'\n'
        for inner_line in $real_col
        do
            ((inner_line_count++))

            kv_key="f${fieldno}l${inner_line_count}"
            kv_val="$inner_line"
            # echo "WROTE COL ${kv_key}: ${kv_val}"
            . ns run kv-write
        done
        if [[ $inner_line_count -gt $max_inner_line_count ]]; then
            max_inner_line_count=$inner_line_count
        fi
        IFS="$sep"
        ((fieldno++))
    done

    # l => line
    # f => field
    l=1
    while [[ $l -le $max_inner_line_count ]]
    do
        f=1
        while [[ $f -lt $fieldno ]]
        do
            sz=$(echo "$sizes_csv" | cut -d "$sep" -f "$f")
            # echo "$kv"
            kv_key="f${f}l${l}"
            . ns run kv-take
            col="$kv_val"
            # echo "RETRIEVED COL ${kv_key}: ${col}"
            colsz=${#col}
            # echo "${sizes_csv} ${sep} ${fieldno}"
            sz=$((sz-colsz))
            ((sz-=2))  # -1 for leading space, -1 for trailing space
            # echo "$sizes_csv"
            # echo "$sz"
            if [[ $l -eq 1 || $f -gt 1 ]]; then
                r="${r} ${col}${sp:0:$sz} |"
            else
                r="${r}"$'\n'" | ${col}${sp:0:$sz} |"
            fi
            ((f++))
        done
        ((l++))
    done
    IFS=$'\n'
    echo "$r"
    echo "$border1"
done

echo
IFS="$saveIFS"

if [[ $SV_VERBOSE -eq 1 ]]; then
    . ns run values
fi

. ns export "sv_*"
