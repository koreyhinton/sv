#!/bin/bash

. ns import "sv_*"

if [[ -z "$sv_sep" ]]; then
    sv_sep=,
fi

sep="$sv_sep"
file="$sv_file"

dir="${file%/*}"

if [[ ! -f "$file" ]]; then
    echo "sv load failed. '${file}' is not a regular file" >&2
    exit 1
fi

header=
wcl=$(cat "$file" | wc -l)
exists=0
if [[ $wcl -gt 1 ]]; then
    header=$(cat "$file" | head -1)
    exists=1
fi

csv=$(cat "$file")

vars=$(set | grep "^sv_" | cut -d '=' -f1)

svns_sub="$csv"
. ns run sv-sep-sub
subst="$svns_sub"

full_line=
full_line_qt_cnt=0
lineno=1  # consider this more as a row number
saveIFS="$IFS"
IFS=$'\n'
for line in $subst # $csv
do
    if [[ $exists -eq 0 ]]; then
        break
    fi

#     if [[ -n "$full_line" ]]; then
#         full_line="$full_line"$'\n'"$line"
#     else
#         full_line="$line"
#     fi
#     svns_sub="$full_line"
#     . ns run sv-sep-sub
#     # echo "$full_line"
#     # echo "Vs."
#     echo "<<<"
#     echo "$svns_sub"
#     echo ">>>"
# 
#     # todo: make full_line so it can truly use $sep (e.g., replace quoted ',')
# 
#     last_col=${svns_sub##*$sep}
#     qt_cnt=$(echo "$last_col" | tr --delete --complement '"' | wc --chars)
#     qt_cnt=$((qt_cnt+full_line_qt_cnt))
# 
#     if [[ "${last_col:0:1}" == '"' && $((qt_cnt % 2)) -eq 1 ]]; then
#         # Given that
#         #    a newline within the column must be surrounded by a pair of column-
#         #    bounding quotes (+2) and any double quote existing in addition
#         #    to the boundary ones will be doubled (x*2) to escape them,
#         # Then
#         #    the quote count cannot be even until the parsing has encountered
#         #    the ending double quote to pair with the starting bounding quote
#         # And we can conclude that
#         #     as long as there is an odd number of quotes, then the column
#         #     will stretch at least on to the next line until the end quote
#         #     is found (aka total column quote count has become an even count)
#         full_line_qt_cnt=$qt_cnt
#         continue  # without incrementing the row number
#     fi


    if [[ $lineno -eq 1 ]]; then
        ((lineno++))
        continue
    fi

    # echo "$line"
    # echo "$svns_sub_out"
    # echo


    match=0

    # all sv_ vars must match (Except for sv_file, sv_row, and sv_sep) record
    # in order to load it to memory
    for svns_name in $vars
    do
        if [[ "$svns_name" == "sv_file" || "$svns_name" == "sv_sep" || "$svns_name" == "sv_row" ]]; then
            continue
        fi

        sv_match_name="$svns_name"
        val="${!svns_name}"
        svns_sub="$val"
        . ns run sv-sep-sub
        # sv_match_value="${!svns_name}"
        sv_match_value="$svns_sub"

        sv_match_header="$header"

        sv_match_content="$line"
        IFS="$saveIFS"
        . ns run match
        IFS=$'\n'
        matches=$sv_matches
        . ns delete sv_matches
        if [[ $matches -eq 0 ]]; then
            match=0
            break
        fi
        match=1
    done

    if [[ $match -eq 1 ]]; then
        idx=1  # cut fields start at index of 1
        sv_row=$((lineno-1))
        IFS="$sv_sep"
        for col_value in $line
        do
            col_name=$(echo "$header" | cut -d "$sv_sep" -f "$idx")

            svns_sub_in="$col_value"
            . ns run sv-sep-sub-resolve

            line_count=$(echo "$svns_sub_out" | wc -l)
            sep_count=$(echo "$svns_sub_out" | grep "$sv_sep" | wc -l)
            qt_count=$(echo "$svns_sub_out" | grep '"' | wc -l)
            sum=$((line_count+sep_count+qt_count))
            if [[ $sum -gt 1 ]]; then
                last_content_dex=${#svns_sub_out}; ((last_content_dex-=2))
                unquoted="${svns_sub_out:1:$last_content_dex}"
                svns_sub_out="$unquoted"
            fi

            # echo "$col_name" "$svns_sub_out"
            export "sv_${col_name}=${svns_sub_out}"
            ((idx++))
        done
        IFS=$'\n'
        break
    fi


    ((lineno++))
done
IFS="$saveIFS"

. ns export "sv_*"
